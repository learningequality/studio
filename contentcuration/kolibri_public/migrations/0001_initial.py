# Generated by Django 3.2.14 on 2023-02-08 20:44
import django.db.models.deletion
import kolibri_content.fields
import mptt.fields
from django.db import migrations
from django.db import models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contentcuration", "0141_add_task_signature"),
    ]

    operations = [
        migrations.CreateModel(
            name="ContentNode",
            fields=[
                (
                    "id",
                    kolibri_content.fields.UUIDField(primary_key=True, serialize=False),
                ),
                (
                    "license_name",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("license_description", models.TextField(blank=True, null=True)),
                ("title", models.CharField(max_length=200)),
                ("coach_content", models.BooleanField(default=False)),
                ("content_id", kolibri_content.fields.UUIDField(db_index=True)),
                ("channel_id", kolibri_content.fields.UUIDField(db_index=True)),
                ("description", models.TextField(blank=True, null=True)),
                ("sort_order", models.FloatField(blank=True, null=True)),
                ("license_owner", models.CharField(blank=True, max_length=200)),
                ("author", models.CharField(blank=True, max_length=200)),
                (
                    "kind",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("topic", "Topic"),
                            ("video", "Video"),
                            ("audio", "Audio"),
                            ("exercise", "Exercise"),
                            ("document", "Document"),
                            ("html5", "HTML5 App"),
                            ("slideshow", "Slideshow"),
                            ("h5p", "H5P"),
                            ("zim", "Zim"),
                            ("quiz", "Quiz"),
                        ],
                        max_length=200,
                    ),
                ),
                ("available", models.BooleanField(default=False)),
                (
                    "options",
                    kolibri_content.fields.JSONField(blank=True, default={}, null=True),
                ),
                ("grade_levels", models.TextField(blank=True, null=True)),
                ("resource_types", models.TextField(blank=True, null=True)),
                ("learning_activities", models.TextField(blank=True, null=True)),
                ("accessibility_labels", models.TextField(blank=True, null=True)),
                ("categories", models.TextField(blank=True, null=True)),
                ("learner_needs", models.TextField(blank=True, null=True)),
                ("duration", models.PositiveIntegerField(blank=True, null=True)),
                (
                    "num_coach_contents",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                (
                    "on_device_resources",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                (
                    "ancestors",
                    kolibri_content.fields.JSONField(
                        blank=True, default=[], load_kwargs={"strict": False}, null=True
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "learning_activities_bitmask_0",
                    models.BigIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "categories_bitmask_0",
                    models.BigIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "grade_levels_bitmask_0",
                    models.BigIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "accessibility_labels_bitmask_0",
                    models.BigIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "learner_needs_bitmask_0",
                    models.BigIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "has_prerequisite",
                    models.ManyToManyField(
                        blank=True,
                        related_name="prerequisite_for",
                        to="kolibri_public.ContentNode",
                    ),
                ),
                (
                    "lang",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contentcuration.language",
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="kolibri_public.contentnode",
                    ),
                ),
                (
                    "related",
                    models.ManyToManyField(
                        blank=True,
                        related_name="_kolibri_public_contentnode_related_+",
                        to="kolibri_public.ContentNode",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ContentTag",
            fields=[
                (
                    "id",
                    kolibri_content.fields.UUIDField(primary_key=True, serialize=False),
                ),
                ("tag_name", models.CharField(blank=True, max_length=30)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="LocalFile",
            fields=[
                (
                    "id",
                    models.CharField(max_length=32, primary_key=True, serialize=False),
                ),
                (
                    "extension",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("mp4", "MP4 Video"),
                            ("webm", "WEBM Video"),
                            ("vtt", "VTT Subtitle"),
                            ("mp3", "MP3 Audio"),
                            ("pdf", "PDF Document"),
                            ("jpg", "JPG Image"),
                            ("jpeg", "JPEG Image"),
                            ("png", "PNG Image"),
                            ("gif", "GIF Image"),
                            ("json", "JSON"),
                            ("svg", "SVG Image"),
                            ("perseus", "Perseus Exercise"),
                            ("graphie", "Graphie Exercise"),
                            ("zip", "HTML5 Zip"),
                            ("h5p", "H5P"),
                            ("zim", "ZIM"),
                            ("epub", "ePub Document"),
                        ],
                        max_length=40,
                    ),
                ),
                ("available", models.BooleanField(default=False)),
                ("file_size", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="File",
            fields=[
                (
                    "id",
                    kolibri_content.fields.UUIDField(primary_key=True, serialize=False),
                ),
                (
                    "preset",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("high_res_video", "High Resolution"),
                            ("low_res_video", "Low Resolution"),
                            ("video_thumbnail", "Thumbnail"),
                            ("video_subtitle", "Subtitle"),
                            ("video_dependency", "Video (dependency)"),
                            ("audio", "Audio"),
                            ("audio_thumbnail", "Thumbnail"),
                            ("audio_dependency", "audio (dependency)"),
                            ("document", "Document"),
                            ("epub", "ePub Document"),
                            ("document_thumbnail", "Thumbnail"),
                            ("exercise", "Exercise"),
                            ("exercise_thumbnail", "Thumbnail"),
                            ("exercise_image", "Exercise Image"),
                            ("exercise_graphie", "Exercise Graphie"),
                            ("channel_thumbnail", "Channel Thumbnail"),
                            ("topic_thumbnail", "Thumbnail"),
                            ("html5_zip", "HTML5 Zip"),
                            ("html5_dependency", "HTML5 Dependency (Zip format)"),
                            ("html5_thumbnail", "HTML5 Thumbnail"),
                            ("h5p", "H5P Zip"),
                            ("h5p_thumbnail", "H5P Thumbnail"),
                            ("zim", "Zim"),
                            ("zim_thumbnail", "Zim Thumbnail"),
                            ("qti", "QTI Zip"),
                            ("qti_thumbnail", "QTI Thumbnail"),
                            ("slideshow_image", "Slideshow Image"),
                            ("slideshow_thumbnail", "Slideshow Thumbnail"),
                            ("slideshow_manifest", "Slideshow Manifest"),
                        ],
                        max_length=150,
                    ),
                ),
                ("supplementary", models.BooleanField(default=False)),
                ("thumbnail", models.BooleanField(default=False)),
                ("priority", models.IntegerField(blank=True, db_index=True, null=True)),
                (
                    "contentnode",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="files",
                        to="kolibri_public.contentnode",
                    ),
                ),
                (
                    "lang",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="contentcuration.language",
                    ),
                ),
                (
                    "local_file",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="files",
                        to="kolibri_public.localfile",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="contentnode",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                related_name="tagged_content",
                to="kolibri_public.ContentTag",
            ),
        ),
        migrations.CreateModel(
            name="ChannelMetadata",
            fields=[
                (
                    "id",
                    kolibri_content.fields.UUIDField(primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.CharField(blank=True, max_length=400)),
                ("tagline", models.CharField(blank=True, max_length=150, null=True)),
                ("author", models.CharField(blank=True, max_length=400)),
                ("version", models.IntegerField(default=0)),
                ("thumbnail", models.TextField(blank=True)),
                ("last_updated", kolibri_content.fields.DateTimeTzField(null=True)),
                ("min_schema_version", models.CharField(max_length=50)),
                (
                    "published_size",
                    models.BigIntegerField(blank=True, default=0, null=True),
                ),
                (
                    "total_resource_count",
                    models.IntegerField(blank=True, default=0, null=True),
                ),
                (
                    "order",
                    models.PositiveIntegerField(blank=True, default=0, null=True),
                ),
                ("public", models.BooleanField()),
                (
                    "included_languages",
                    models.ManyToManyField(
                        blank=True,
                        related_name="public_channels",
                        to="contentcuration.Language",
                        verbose_name="languages",
                    ),
                ),
                (
                    "root",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="kolibri_public.contentnode",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="AssessmentMetaData",
            fields=[
                (
                    "id",
                    kolibri_content.fields.UUIDField(primary_key=True, serialize=False),
                ),
                ("assessment_item_ids", kolibri_content.fields.JSONField(default=[])),
                ("number_of_assessments", models.IntegerField()),
                ("mastery_model", kolibri_content.fields.JSONField(default={})),
                ("randomize", models.BooleanField(default=False)),
                ("is_manipulable", models.BooleanField(default=False)),
                (
                    "contentnode",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="assessmentmetadata",
                        to="kolibri_public.contentnode",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
