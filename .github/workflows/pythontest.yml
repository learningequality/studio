name: Python tests

on:
  push:
    branches:
    - unstable
    - hotfixes
    - master
  pull_request:

jobs:
  pre_job:
    name: Path match check
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          github_token: ${{ github.token }}
          paths: '["**.py", "requirements.txt", "requirements-dev.txt", ".github/workflows/pythontest.yml"]'

  unit_test:
    name: Python unit tests
    needs: pre_job
    if: ${{ needs.pre_job.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_USER: learningequality
          POSTGRES_PASSWORD: kolibri
          POSTGRES_DB: kolibri-studio
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
      # Label used to access the service container
      redis:
        # Docker Hub image
        image: redis:6.0.9
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
    steps:
    - uses: actions/checkout@v4
    - name: Set up minio
      run: |
        docker run -d -p 9000:9000 --name minio \
                    -e "MINIO_ACCESS_KEY=development" \
                    -e "MINIO_SECRET_KEY=development" \
                    -v /tmp/minio_data:/data \
                    -v /tmp/minio_config:/root/.minio \
                    minio/minio server /data
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: pip cache
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pytest-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pytest-
    - name: Install pip-tools and python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pip-tools
        pip-sync requirements.txt requirements-dev.txt
    - name: Test pytest
      run: |
        sh -c './contentcuration/manage.py makemigrations --check'
        pytest
