version: '3.4'

x-studio-environment:
  &studio-environment
    MPLBACKEND: ps
    SHELL: /bin/bash
    AWS_S3_ENDPOINT_URL: http://minio:9000
    DATA_DB_HOST: postgres
    DJANGO_SETTINGS_MODULE: contentcuration.dev_settings
    RUN_MODE: docker-compose
    CELERY_TIMEZONE: America/Los_Angeles
    CELERY_REDIS_DB: 0
    CELERY_BROKER_ENDPOINT: redis
    CELERY_RESULT_BACKEND_ENDPOINT: redis
    CELERY_REDIS_PASSWORD: ""
    PROBER_STUDIO_BASE_URL: http://studio-app:8080/{path}

x-studio-worker:
  &studio-worker
    build:
      context: .
      dockerfile: docker/Dockerfile.dev
    image: learningequality/studio-app-dev
    depends_on:
      - minio
      - postgres
      - redis
    volumes:
      - .:/src
    environment: *studio-environment

services:
  studio-app:
    <<: *studio-worker
    entrypoint: python docker/entrypoint.py
    command: yarn run devserver
    ports:
      - "8080:8080"
      - "4000:4000"

  celery-worker:
    <<: *studio-worker
    command: make prodceleryworkers

  minio:
    image: minio/minio:RELEASE.2020-06-22T03-12-50Z
    entrypoint: minio server /data
    environment:
      MINIO_ACCESS_KEY: development
      MINIO_SECRET_KEY: development
      MINIO_API_CORS_ALLOW_ORIGIN: 'http://localhost:8080,http://127.0.0.1:8080'
    volumes:
      - minio_data:/data

  postgres:
    image: postgres:12
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
      POSTGRES_USER: learningequality
      POSTGRES_PASSWORD: kolibri
      POSTGRES_DB: kolibri-studio
    volumes:
      - pgdata:/var/lib/postgresql/data/pgdata

  redis:
    image: redis:4.0.9

  cloudprober:
    <<: *studio-worker
    working_dir: /src/deploy
    entrypoint: ""
    # sleep 30 seconds allowing some time for the studio app to start up
    command: '/bin/bash -c "sleep 30 && /bin/cloudprober --config_file ./cloudprober.cfg"'
    # wait until the main app and celery worker have started
    depends_on:
      - studio-app
      - celery-worker


volumes:
  minio_data:
  pgdata:
